MVC-Model-View-Controller (or MVC)
--> is probably one of the most popular architectures for applications.
-->We can describe the MVC architecture in simple words:

Model: 
		The part of our application that will deal with the database or any data-related functionality.
View:
		Everything the user will see. Basically the pages that weâ€™re going to send to the client.
Controller: 
		The logic of our site, and the glue between models and views. Here we call our 
		models to get the data, then we put that data on our views to be sent to the users.
		
	---->famous for :
	         client-server
			 rest api server**
	****Data can be send to server using the below three methods:		 
    --->query string is one method to pass data to server through uri(?)
	--->request body we can send passwords safely--->url encoded data,text data,application data,raw data,
	     form data
	-->request param:
	    data appended to query string 
		inside url using (:)
    -->request header--for generating token here
	
	***http methods:
	    -->stateless transfer protocol 
		-->data sharing protocol
		-->one of TCP IP protocol
		-->no dedicated connection
		-->methods in http :
		1.GET method(fetching data from server)
		2.POST method(insert resources to server--creating of new record)
		3.PUT method(already resource in server we are updating a resource)
		4.DELETE method (Deleting resource --files,data,record)
		5.PATCH method(Small Update)
		6.TRACE......etc
		***Browser can send only GET method... not other methods
		***Backend and front end work done parallely frontend initially do hardcoded data later
		     they use dynamice makes use of backend 
			 
	   ***Forms can only send GET and POST 
	   
	   ***We use another module to make use of all http methods:
	        another webclient other than browser(webclient) is POSTMAN(webclient)
			
-----------------------------------------------------------------------------------------------------------------
1.created folders for logic-Controller,data-Model,UserVisibility-view,Routing(Mapping)-Router		
2.Code related to data ---getting json data from Model to Controller
            var VariableNAme = require('../Model/---Path---');
			
			***The parseInt() function parses a string and returns an integer.
			     The radix parameter is used to specify which numeral system to be used
				 If the radix parameter is omitted, JavaScript assumes the following:

                      -->If the string begins with "0x", the radix is 16 (hexadecimal)
                      -->If the string begins with "0", the radix is 8 (octal). This feature is deprecated
                      -->If the string begins with any other value, the radix is 10 (decimal)
					  
					  
			
			 